//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace CrmEarlyBound {
  using CnCrm.WfActivities.HelperCode;
  using CrmEarlyBound.OptionSet;

  /// <summary>
  /// Stage associated with a process.
  /// </summary>
  [System.Runtime.Serialization.DataContractAttribute()]
  [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processstage")]
  [System.CodeDom.Compiler.GeneratedCodeAttribute("CrmSvcUtil", "8.2.1.8676")]
  public partial class ProcessStage : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {

    public static class Fields {
      public const string ClientData = "clientdata";
      public const string OwnerId = "ownerid";
      public const string OwningBusinessUnit = "owningbusinessunit";
      public const string PrimaryEntityTypeCode = "primaryentitytypecode";
      public const string ProcessId = "processid";
      public const string ProcessStageId = "processstageid";
      public const string Id = "processstageid";
      public const string StageCategory = "stagecategory";
      public const string StageName = "stagename";
      public const string VersionNumber = "versionnumber";
      public const string process_processstage = "process_processstage";
    }

    /// <summary>
    /// Default Constructor.
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public ProcessStage()
      :
      base(EntityLogicalName) { }

    public const string EntityLogicalName = "processstage";

    public const int EntityTypeCode = 4724;

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanged(string propertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
    }

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanging(string propertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
      }
    }

    /// <summary>
    /// Step metadata for process stage
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("clientdata")]
    public string ClientData {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<string>("clientdata"); }
    }

    /// <summary>
    /// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
    public Microsoft.Xrm.Sdk.EntityReference OwnerId {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid"); }
    }

    /// <summary>
    /// Select the business unit that owns the record.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
    public System.Nullable<System.Guid> OwningBusinessUnit {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<System.Nullable<System.Guid>>("owningbusinessunit"); }
    }

    /// <summary>
    /// Primary entity associated with the stage.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("primaryentitytypecode")]
    public string PrimaryEntityTypeCode {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<string>("primaryentitytypecode"); }
      [System.Diagnostics.DebuggerNonUserCode()] set {
        this.OnPropertyChanging("PrimaryEntityTypeCode");
        this.SetAttributeValue("primaryentitytypecode", value);
        this.OnPropertyChanged("PrimaryEntityTypeCode");
      }
    }

    /// <summary>
    /// Shows the ID of the process.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processid")]
    public Microsoft.Xrm.Sdk.EntityReference ProcessId {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("processid"); }
      [System.Diagnostics.DebuggerNonUserCode()] set {
        this.OnPropertyChanging("ProcessId");
        this.SetAttributeValue("processid", value);
        this.OnPropertyChanged("ProcessId");
      }
    }

    /// <summary>
    /// Shows the ID of the process stage record.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processstageid")]
    public System.Nullable<System.Guid> ProcessStageId {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<System.Nullable<System.Guid>>("processstageid"); }
      [System.Diagnostics.DebuggerNonUserCode()] set {
        this.OnPropertyChanging("ProcessStageId");
        this.SetAttributeValue("processstageid", value);
        if (value.HasValue) {
          base.Id = value.Value;
        } else {
          base.Id = System.Guid.Empty;
        }
        this.OnPropertyChanged("ProcessStageId");
      }
    }

    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processstageid")]
    public override System.Guid Id {
      [System.Diagnostics.DebuggerNonUserCode()] get { return base.Id; }
      [System.Diagnostics.DebuggerNonUserCode()] set { this.ProcessStageId = value; }
    }

    /// <summary>
    /// Select the category of the sales process.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("stagecategory")]
    public Microsoft.Xrm.Sdk.OptionSetValue StageCategory {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("stagecategory"); }
      [System.Diagnostics.DebuggerNonUserCode()] set {
        this.OnPropertyChanging("StageCategory");
        this.SetAttributeValue("stagecategory", value);
        this.OnPropertyChanged("StageCategory");
      }
    }

    /// <summary>
    /// Type a name for the process stage.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("stagename")]
    public string StageName {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<string>("stagename"); }
      [System.Diagnostics.DebuggerNonUserCode()] set {
        this.OnPropertyChanging("StageName");
        this.SetAttributeValue("stagename", value);
        this.OnPropertyChanged("StageName");
      }
    }

    /// <summary>
    /// Version number of the process stage.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
    public System.Nullable<long> VersionNumber {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetAttributeValue<System.Nullable<long>>("versionnumber"); }
    }

    /// <summary>
    /// N:1 process_processstage
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processid")]
    [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("process_processstage")]
    public CrmEarlyBound.Workflow process_processstage {
      [System.Diagnostics.DebuggerNonUserCode()] get { return this.GetRelatedEntity<CrmEarlyBound.Workflow>("process_processstage", null); }
      [System.Diagnostics.DebuggerNonUserCode()] set {
        this.OnPropertyChanging("process_processstage");
        this.SetRelatedEntity<CrmEarlyBound.Workflow>("process_processstage", null, value);
        this.OnPropertyChanged("process_processstage");
      }
    }

    /// <summary>
    /// Constructor for populating via LINQ queries given a LINQ anonymous type
    /// <param name="anonymousType">LINQ anonymous type.</param>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public ProcessStage(object anonymousType)
      :
      this() {
      foreach (var p in anonymousType.GetType().GetProperties()) {
        var value = p.GetValue(anonymousType, null);
        var name = p.Name.ToLower();

        if (name.EndsWith("enum") && value.GetType().BaseType == typeof (System.Enum)) {
          value = new Microsoft.Xrm.Sdk.OptionSetValue((int)value);
          name = name.Remove(name.Length - "enum".Length);
        }

        switch (name) {
          case "id":
            base.Id = (System.Guid)value;
            Attributes["processstageid"] = base.Id;
            break;
          case "processstageid":
            var id = (System.Nullable<System.Guid>)value;
            if (id == null) {
              continue;
            }
            base.Id = id.Value;
            Attributes[name] = base.Id;
            break;
          case "formattedvalues":
            // Add Support for FormattedValues
            FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
            break;
          default:
            Attributes[name] = value;
            break;
        }
      }
    }

    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("stagecategory")]
    public virtual Processstage_Category? StageCategoryEnum {
      [System.Diagnostics.DebuggerNonUserCode()] get { return ((Processstage_Category?)(EntityOptionSetEnum.GetEnum(this, "stagecategory"))); }
      [System.Diagnostics.DebuggerNonUserCode()] set { StageCategory = value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null; }
    }
  }
}